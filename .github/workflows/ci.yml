# 工作流名称。
name: CI
# 定义触发工作流的事件。
on:
  # 当有代码推送时触发。
  push:
  # 当有 Pull Request 时触发。
  pull_request:
env:
  # 设置 golangci-lint 的版本。
  GOLANGCI_LINT_VERSION: v1.64.8
  # Go 版本。
  GO_VERSION: '1.25'
jobs:
  # 定义测试作业。
  test:
    # 作业的显示名称。
    name: Test
    # 指定运行环境为最新版本的 Ubuntu。
    runs-on: ubuntu-latest
    strategy:
      matrix:
        # 定义测试矩阵，在多个 Go 版本上运行测试。
        # TODO: 低版本会出现错误，待处理。
        # go-version: ['1.25', '1.24', '1.23']
        go-version: ['1.25']
      # 设置当某个版本测试失败时，其他版本继续执行。
      fail-fast: true
      # 如果限制并发执行数为 1，测试按顺序执行。
      max-parallel: 1
    steps:
      # 使用官方的 checkout action 检出代码。
      - uses: actions/checkout@v4
      # 使用官方的 setup-go action 配置 Go 环境。
      - name: Set up Go
        uses: actions/setup-go@v4
        with:
          # 使用矩阵中定义的 Go 版本。
          go-version: ${{ matrix.go-version }}
          # 启用依赖缓存，加速构建。
          cache: true
      # 使用 Makefile 中的 download 命令下载依赖。
      - name: Install dependencies
        run: make download
      # 使用 Makefile 中的 verify 命令验证依赖完整性。
      - name: Verify dependencies
        run: make verify
      # 使用 Makefile 中的 test 命令运行测试。
      - name: Run tests
        run: make test
      # 使用 Makefile 中的 coverage 命令运行测试并生成覆盖率报告。
      - name: Run tests with coverage
        run: make coverage
      # 使用 Codecov 官方 action 上传覆盖率报告。
      # 上传后可以在 https://codecov.io 查看报告，需要先用 GitHub 账号登录并激活仓库。
      # 也可以通过 GitHub PR 中的 Codecov bot 评论查看覆盖率变化。
      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v3
        with:
          # 指定覆盖率报告文件路径。
          file: ./out/coverage.txt
          # 上传失败时不中断 CI 流程。
          fail_ci_if_error: false
  lint:
    # 设置任务显示名称为 Lint。
    name: Lint
    # 指定运行环境为最新版本的 Ubuntu。
    runs-on: ubuntu-latest
    steps:
      # 使用 actions/checkout@v4 动作检出代码仓库。
      - uses: actions/checkout@v4
      # 配置 Go 语言环境。
      - name: Set up Go
        # 使用 actions/setup-go@v4 动作设置 Go 环境。
        uses: actions/setup-go@v4
        with:
          # 指定使用 Go 版本。
          go-version: ${{ env.GO_VERSION }}
          # 启用 Go 模块缓存以加速构建。
          cache: true
      # 运行 golangci-lint 进行代码质量检查。
      - name: Run golangci-lint
        # 低版本会出现错误：
        # Error: can't load config: the Go language version (go1.23) used to build golangci-lint is lower than the targeted Go version (1.25)
        # Failed executing command with error: can't load config: the Go language version (go1.23) used to build golangci-lint is lower than the targeted Go version (1.25)
        # Error: can't load config: the Go language version (go1.24) used to build golangci-lint is lower than the targeted Go version (1.25)
        # Failed executing command with error: can't load config: the Go language version (go1.24) used to build golangci-lint is lower than the targeted Go version (1.25)
        run: |-
          # 安装 golangci-lint。
          # 注意 v1 v2 版本存在较大差异，对配置文件也不兼容。
          go install github.com/golangci/golangci-lint/cmd/golangci-lint@${{ env.GOLANGCI_LINT_VERSION }}
          # 显示版本信息。
          golangci-lint version
          # 运行 golangci-lint。
          make lint
