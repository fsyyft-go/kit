// Copyright 2025 fsyyft-go
//
// Licensed under the MIT License. See LICENSE file in the project root for full license information.

/*
Package crypto 提供了一系列加密和哈希算法的实现，包括对称加密、非对称加密、哈希函数和一次性密码等功能。

主要组件：

1. 对称加密：
  - AES：高级加密标准，支持 GCM 模式
  - DES：数据加密标准，支持标准 DES 和 3DES
  - 支持多种工作模式和数据格式
  - 自动密钥和向量管理

2. 非对称加密：
  - RSA：支持加密和数字签名
  - 密钥格式转换和管理
  - 填充机制和安全处理
  - 错误恢复机制

3. 哈希函数：
  - MD5：消息摘要算法
  - 支持多种输入格式
  - 提供多种输出编码
  - 性能优化实现

4. 一次性密码：
  - HOTP：基于 HMAC 的一次性密码
  - TOTP：基于时间的一次性密码
  - 兼容主流验证器
  - 安全的验证机制

安全特性：

1. 密钥管理：
  - 安全的密钥生成
  - 密钥格式验证
  - 密钥完整性检查
  - 安全的密钥存储

2. 数据保护：
  - 加密数据完整性
  - 防重放攻击
  - 安全的填充机制
  - 错误信息保护

3. 算法安全：
  - 使用标准算法
  - 安全的实现方式
  - 最新的安全实践
  - 持续的安全更新

性能优化：

1. 内存管理：
  - 高效的内存使用
  - 适当的缓冲区
  - 资源及时释放
  - 内存复用机制

2. 计算效率：
  - 优化的算法实现
  - 减少数据拷贝
  - 并发安全处理
  - 批量数据优化

使用建议：

1. 算法选择：
  - AES：推荐用于数据加密
  - RSA：用于密钥交换和签名
  - MD5：仅用于数据校验
  - OTP：用于双因素认证

2. 安全实践：
  - 使用安全的密钥长度
  - 正确处理错误信息
  - 定期更新密钥
  - 遵循安全标准

3. 性能考虑：
  - 选择适当的算法
  - 优化数据处理
  - 合理使用资源
  - 注意并发安全

注意事项：

1. 通用安全：
  - 保护敏感信息
  - 安全传输数据
  - 验证数据完整性
  - 记录安全日志

2. 开发建议：
  - 遵循最佳实践
  - 进行安全审计
  - 保持代码更新
  - 关注安全公告

3. 维护要求：
  - 定期更新算法
  - 监控安全问题
  - 及时修复漏洞
  - 保持文档更新
*/
package crypto
